package com.shaunhaldane.shaunhaldanebloginitializr.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.shaunhaldane.shaunhaldanebloginitializr.entity.Post;
import com.shaunhaldane.shaunhaldanebloginitializr.exception.GlobalExceptionHandler;
import com.shaunhaldane.shaunhaldanebloginitializr.repository.PostRepository;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/admin")
@PreAuthorize("hasRole('ADMIN')")
public class AdminController {

	@Autowired 
	PostRepository postRepository;
	
	@Autowired
	GlobalExceptionHandler globalExceptionHandler;
	
	// Add new post
	@PostMapping("/add-post")
	public ResponseEntity<?> addNewPost(@Valid @RequestBody Post post, BindingResult result) {
		ResponseEntity<?> errorMap = globalExceptionHandler.MapValidationErrors(result);
		if(errorMap!=null)return errorMap;
		Post newPost = postRepository.save(post);
		return new ResponseEntity<Post>(newPost, HttpStatus.CREATED);
		}
	
	// Edit post
	@PutMapping("/posts/{id}")
	public ResponseEntity<Post> editPlace(@PathVariable("id") int id, 
			@RequestBody Post post) {
		
		Post originalPost = postRepository.findById(id);
		originalPost.setTitle(post.getTitle());
		originalPost.setContent(post.getContent());
		originalPost.setLastUpdated(post.getLastUpdated());

		postRepository.save(originalPost);
		
		return new ResponseEntity<>(originalPost, HttpStatus.CREATED);
	}
	
	// Delete post
	@DeleteMapping("/posts/{id}")
	public ResponseEntity<HttpStatus> deletePost(@PathVariable long id) {
		postRepository.deleteById(id);
		return new ResponseEntity<HttpStatus>(HttpStatus.NO_CONTENT);
	}
}
